/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rs.pop.optimizer;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import static java.lang.Math.max;
import static java.lang.Math.min;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author 0x2
 */
public class OptimizerInterface extends javax.swing.JFrame {

    private ShipSettings ship = new ShipSettings();
    private CrewSettings crew = new CrewSettings();
    private CrewEdit edit = new CrewEdit();
    private MissionSettings mission = new MissionSettings();
    private int[] need = {0, 0, 0};
    private double bestSucces = 0.0;
    private Container bestSet = new Container();
    private int[] bestShipId = {0, 0, 0, 0};

    /**
     * Creates new form OptimizerInterface
     */
    public OptimizerInterface() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        crew.setEditScreen(edit);
        mission.setParent(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btSrch = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        mNeed = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        shipConsole = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        crewConsole = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();
        AOT = new java.awt.Checkbox();
        Version = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RuneScape Player Owned Ports Optimizer");
        setName("RuneScape Player Owned Ports Optimizer"); // NOI18N
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton1.setText("Ship Settings");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ship(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ship(evt);
            }
        });

        jButton2.setText("Crew Settings");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                crew(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                crew(evt);
            }
        });

        btSrch.setText("<html><center>Search !<br />~ 1-2 min</center></html>");
        btSrch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onSearch(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onSearch(evt);
            }
        });

        jButton4.setText("Save");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onSave(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onSave(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Load");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onLoad(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onLoad(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        mNeed.setText("Mission need: 0 / 0 / 0");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("- Interface might not be responsive while searching -");

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        shipConsole.setEditable(false);
        shipConsole.setColumns(20);
        shipConsole.setRows(5);
        jScrollPane1.setViewportView(shipConsole);

        jLabel2.setText("Optimal ship settings:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Optimal captain and crew:");

        crewConsole.setEditable(false);
        crewConsole.setColumns(20);
        crewConsole.setRows(5);
        jScrollPane2.setViewportView(crewConsole);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(mNeed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)))
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mNeed))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButton6.setText("Set Mission");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onSetMission(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onSetMission(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4))
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(83, 83, 83)
                .addComponent(btSrch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton4)
                            .addComponent(jButton5)))
                    .addComponent(btSrch))
                .addGap(5, 5, 5))
        );

        AOT.setLabel("Always on top");
        AOT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                setAOT(evt);
            }
        });

        Version.setText("Version x");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Version)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AOT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AOT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Version))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleDescription("A simple tool for optimizing your POP experience!");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setAOT(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_setAOT
        ship.setAOP(this.AOT.getState());
        crew.setAOP(this.AOT.getState());
        edit.setAOP(this.AOT.getState());
        mission.setAOP(this.AOT.getState());

        this.setAlwaysOnTop(this.AOT.getState());
    }//GEN-LAST:event_setAOT

    private void ship(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ship
        ship.setParent(this);
        ship.setVisible(true);
    }//GEN-LAST:event_ship

    private void crew(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_crew
        crew.setVisible(true);
    }//GEN-LAST:event_crew

    private void onSetMission(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onSetMission
        mission.setVals(need);
        mission.setVisible(true);
    }//GEN-LAST:event_onSetMission

    private void onSave(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onSave
        Container c = new Container();
        c.setCrew(crew.getCrew());
        c.setShip(ship.getShip());

        JFileChooser fc = new JFileChooser();
        if (fc.showSaveDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            File fl = fc.getSelectedFile();
            try {
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fl.getPath() + ".pop"));
                out.writeObject(c);
                out.flush();
                out.close();
                this.Version.setText(fc.getSelectedFile().getName() + ".pop has been saved");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getLocalizedMessage(), "Save error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_onSave

    private void onLoad(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onLoad
        FileFilter ft = new FileNameExtensionFilter("POP Settings Files", "pop");
        JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(ft);

        if (fc.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
            File fl = fc.getSelectedFile();
            try {
                ObjectInputStream in = new ObjectInputStream(new FileInputStream(fl));
                Container c = (Container) in.readObject();
                in.close();
                crew.setTeam(c.getCrew());
                ship.setShip(c.getShip());
                if (ship.getShip().getEnabled()) {
                    this.btSrch.setText("<html><center>Search !<br />~ 72 minutes</center></html>");
                } else {
                    this.btSrch.setText("<html><center>Search !<br />~ 1 minute</center></html>");
                }
                this.Version.setText(fc.getSelectedFile().getName() + " has been loaded");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getLocalizedMessage(), "Load error", JOptionPane.ERROR_MESSAGE);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, ex.getLocalizedMessage(), "Load error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_onLoad

    private void onSearch(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onSearch
        //Best ship settings
        bestSucces = 0.0;
        Ship s = ship.getShip();
        int[] availDeck = s.getDeck();
        int[] availHull = s.getHull();
        int[] availRam = s.getRam();
        String availWright = s.getWright();
        int mDeckId = 0, cDeckId = 0, sDeckId = 0;
        int mHullId = 0, cHullId = 0, sHullId = 0;
        int mRamId = 0, cRamId = 0, sRamId = 0;
        int wrightId = 0;
        Boolean hasAzureHull = false;

        if (s.getEnabled()) {
            for (int i = 0; i < availDeck.length; i++) {
                if (availDeck[i] == 1 || availDeck[i] == 3 || availDeck[i] == 6 || availDeck[i] == 9 || availDeck[i] == 12 || availDeck[i] == 15 || availDeck[i] == 18 || availDeck[i] == 22) {
                    if (availDeck[i] > mDeckId) {
                        mDeckId = availDeck[i];
                    }
                } else {
                    if (availDeck[i] == 4 || availDeck[i] == 7 || availDeck[i] == 10 || availDeck[i] == 13 || availDeck[i] == 16 || availDeck[i] == 19 || availDeck[i] == 20) {
                        if (availDeck[i] > cDeckId) {
                            cDeckId = availDeck[i];
                        }
                    } else {
                        if (availDeck[i] == 0 || availDeck[i] == 2 || availDeck[i] == 5 || availDeck[i] == 8 || availDeck[i] == 11 || availDeck[i] == 14 || availDeck[i] == 17 || availDeck[i] == 21) {
                            if (availDeck[i] > sDeckId) {
                                sDeckId = availDeck[i];
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < availHull.length; i++) {
                if (availHull[i] == 4 || availHull[i] == 9 || availHull[i] == 12) {
                    if (availHull[i] > mHullId) {
                        mHullId = availHull[i];
                    }
                } else {
                    if (availHull[i] == 1 || availHull[i] == 3 || availHull[i] == 6 || availHull[i] == 8 || availHull[i] == 11) {
                        if (availHull[i] > cHullId) {
                            cHullId = availHull[i];
                        }
                    } else {
                        if (availHull[i] == 0 || availHull[i] == 2 || availHull[i] == 5 || availHull[i] == 7 || availHull[i] == 10 || availHull[i] == 13) {
                            if (availHull[i] > sHullId) {
                                sHullId = availHull[i];
                            }
                        } else {
                            if (availHull[i] == 14) {
                                hasAzureHull = true;
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < availRam.length; i++) {
                if (availRam[i] == 1 || availRam[i] == 3 || availRam[i] == 5 || availRam[i] == 7 || availRam[i] == 9 || availRam[i] == 11 || availRam[i] == 13) {
                    if (availRam[i] > mRamId) {
                        mRamId = availRam[i];
                    }
                } else {
                    if (availRam[i] == 0 || availRam[i] == 2 || availRam[i] == 4 || availRam[i] == 6 || availRam[i] == 8 || availRam[i] == 10 || availRam[i] == 12 || availRam[i] == 14) {
                        if (availRam[i] > cRamId) {
                            cRamId = availRam[i];
                        }
                    } else {
                        if (availRam[i] == 13) {
                            if (availRam[i] > sRamId) {
                                sRamId = availRam[i];
                            }
                        }
                    }
                }
            }
        }

        Container c = new Container();
        int dPossibilities = 0, hPossibilities = 0, rPossibilities = 0;
        if (mDeckId != 0) {
            dPossibilities++;
        }
        if (cDeckId != 0) {
            dPossibilities++;
        }
        if (sDeckId != 0) {
            dPossibilities++;
        }
        if (mHullId != 0) {
            hPossibilities++;
        }
        if (cHullId != 0) {
            hPossibilities++;
        }
        if (sHullId != 0) {
            hPossibilities++;
        }
        if (hasAzureHull) {
            hPossibilities++;
        }
        if (mRamId != 0) {
            rPossibilities++;
        }
        if (cRamId != 0) {
            rPossibilities++;
        }
        if (sRamId != 0) {
            rPossibilities++;
        }
        int nbCpt = 0;
        int nbCrew = 0;
        if (!s.getEnabled()) {
            dPossibilities = 1;
            hPossibilities = 1;
            rPossibilities = 1;
        }

        for (int i = 0; i < 5; i++) {
            if (!(crew.getCrew().get(i).getStats()[0] == 0 && crew.getCrew().get(i).getStats()[1] == 0 && crew.getCrew().get(i).getStats()[2] == 0)) {
                nbCpt++;
            }
        }
        for (int i = 0; i < 25; i++) {
            if (!(crew.getCrew().get(i + 5).getStats()[0] == 0 && crew.getCrew().get(i + 5).getStats()[1] == 0 && crew.getCrew().get(i + 5).getStats()[2] == 0)) {
                nbCrew++;
            }
        }

        int deck1Id = 0, deck2Id = 0, hullId = 0, ramId = 0;
        int[] shipId = {0, 0, 0, 0};

        for (int i = 0; i < dPossibilities; i++) {
            //Ship deck 1
            if (s.getEnabled()) {
                if (i == 0) {
                    if (mDeckId > 0) {
                        deck1Id = mDeckId;
                    } else {
                        if (cDeckId > 0) {
                            deck1Id = cDeckId;
                        } else {
                            if (sDeckId > 0) {
                                deck1Id = sDeckId;
                            }
                        }
                    }
                } else {
                    if (i == 1) {
                        if (cDeckId > 0) {
                            deck1Id = cDeckId;
                        } else {
                            if (sDeckId > 0) {
                                deck1Id = sDeckId;
                            }
                        }
                    } else {
                        deck1Id = sDeckId;
                    }
                }
                shipId[0] = deck1Id;
            } else {
                shipId[0] = -1;
            }

            for (int j = 0; j < dPossibilities; j++) {
                //Ship deck 2
                if (s.getEnabled()) {
                    if (j == 0) {
                        if (mDeckId > 0) {
                            deck2Id = mDeckId;
                        } else {
                            if (cDeckId > 0) {
                                deck2Id = cDeckId;
                            } else {
                                if (sDeckId > 0) {
                                    deck2Id = sDeckId;
                                }
                            }
                        }
                    } else {
                        if (j == 1) {
                            if (cDeckId > 0) {
                                deck2Id = cDeckId;
                            } else {
                                if (sDeckId > 0) {
                                    deck2Id = sDeckId;
                                }
                            }
                        } else {
                            deck2Id = sDeckId;
                        }
                    }
                    shipId[1] = deck2Id;
                } else {
                    shipId[1] = -1;
                }

                for (int k = 0; k < hPossibilities; k++) {
                    //Ship hull
                    if (s.getEnabled()) {
                        if (k == 0) {
                            if (mHullId > 0) {
                                hullId = mHullId;
                            } else {
                                if (cHullId > 0) {
                                    hullId = cHullId;
                                } else {
                                    if (sHullId > 0) {
                                        hullId = sHullId;
                                    }
                                }
                            }
                        } else {
                            if (k == 1) {
                                if (cHullId > 0) {
                                    hullId = cHullId;
                                } else {
                                    if (sHullId > 0) {
                                        hullId = sHullId;
                                    }
                                }
                            } else {
                                if (k == 2) {
                                    if (sHullId > 0) {
                                        hullId = sHullId;
                                    } else {
                                        hullId = 14;
                                    }
                                } else {
                                    hullId = 14;
                                }
                            }
                        }
                        shipId[2] = hullId;
                    } else {
                        shipId[2] = -1;
                    }

                    for (int l = 0; l < rPossibilities; l++) {
                        //Ship ram
                        if (s.getEnabled()) {
                            if (l == 0) {
                                if (mRamId > 0) {
                                    ramId = mRamId;
                                } else {
                                    if (cRamId > 0) {
                                        ramId = cRamId;
                                    } else {
                                        if (sRamId > 0) {
                                            ramId = sRamId;
                                        }
                                    }
                                }
                            } else {
                                if (l == 1) {
                                    if (cRamId > 0) {
                                        ramId = cRamId;
                                    } else {
                                        if (sRamId > 0) {
                                            ramId = sRamId;
                                        }
                                    }
                                } else {
                                    ramId = sRamId;
                                }
                            }
                            shipId[3] = ramId;
                        } else {
                            shipId[3] = -1;
                        }

                        for (int m = 0; m < nbCpt; m++) {
                            //Ship captain
                            if (crew.getCrew().get(m).isAvailable()) {
                                for (int n = 0; n < nbCrew; n++) {
                                    //Ship crew 1
                                    if (crew.getCrew().get(n + 5).isAvailable()) {
                                        for (int o = 0; o < nbCrew; o++) {
                                            if (n != o && crew.getCrew().get(o + 5).isAvailable()) {
                                                //Ship crew 2
                                                for (int p = 0; p < nbCrew; p++) {
                                                    if (n != p && o != p && crew.getCrew().get(p + 5).isAvailable()) {
                                                        //Ship crew 3
                                                        for (int q = 0; q < nbCrew; q++) {
                                                            if (n != q && o != q && p != q && crew.getCrew().get(q + 5).isAvailable()) {
                                                                //Ship crew 4
                                                                for (int r = 0; r < nbCrew; r++) {
                                                                    if (n != r && o != r && p != r && q != r && crew.getCrew().get(r + 5).isAvailable()) {
                                                                        //Ship crew 5
                                                                        c.addCrew(crew.getCrew().get(m));
                                                                        c.addCrew(crew.getCrew().get(n + 5));
                                                                        c.addCrew(crew.getCrew().get(o + 5));
                                                                        c.addCrew(crew.getCrew().get(p + 5));
                                                                        c.addCrew(crew.getCrew().get(q + 5));
                                                                        c.addCrew(crew.getCrew().get(r + 5));
                                                                        evaluate(c, shipId, availWright);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        showResultSearch();
        this.Version.setText("Finised!");
    }//GEN-LAST:event_onSearch

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OptimizerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OptimizerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OptimizerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OptimizerInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OptimizerInterface().setVisible(true);
            }
        });
    }

    public void setVersion(String v) {
        this.Version.setText("Version " + v + " by 0x2");
    }

    public void setMissionRes(int[] res) {
        this.mNeed.setText("Mission need: " + res[0] + " / " + res[1] + " / " + res[2]);
        need = res;
    }

    private void evaluate(Container c, int[] shipId, String wright) {
        //Calc stats for ship
        Ship dflt = ship.getShip();
        int[] setStats = {dflt.getDfltStats()[0], dflt.getDfltStats()[1], dflt.getDfltStats()[2]};
        if (shipId[0] != -1) {
            setStats = shipId2Stats(shipId);
        }

        //Calc stats for crew
        for (int t = 0; t < 6; t++) {
            Crew cr = c.getCrew().get(t);
            for (int u = 0; u < 3; u++) {
                setStats[u] += cr.getStats()[u];
            }
        }

        //Final modifier data
        Boolean foundSolid = false;
        int memberActiveSolid = 0;
        int solidBoost = 0;
        int[] statBoost = {0, 0, 0};
        for (int t = 0; t < 6; t++) {
            Crew cr = c.getCrew().get(t);
            if (cr.getTraits()[8] && !foundSolid) {
                solidBoost = cr.getBonus();
                foundSolid = true;
                memberActiveSolid = t;
            }

            if (cr.getTraits()[0]) {
                statBoost[0]++;
            }
            if (cr.getTraits()[1]) {
                statBoost[1]--;
            }
            if (cr.getTraits()[2]) {
                statBoost[2]++;
            }
            if (cr.getTraits()[3]) {
                statBoost[3]--;
            }
            if (cr.getTraits()[4]) {
                statBoost[4]++;
            }
            if (cr.getTraits()[5]) {
                statBoost[5]--;
            }
        }
        if (wright.equals("Refitted shipwright")) {
            statBoost[0] += 2;
            statBoost[1] += 2;
            statBoost[2] += 2;
        } else {
            if (wright.equals("Renovated shipwright") || wright.equals("Renovated shipwright")) {
                statBoost[0] += 3;
                statBoost[1] += 3;
                statBoost[2] += 3;
            } else {
                if (wright.equals("Nautical shipwright")) {
                    statBoost[0] += 3;
                    statBoost[1] += 3;
                    statBoost[2] += 5;
                } else {
                    if (wright.equals("Warship shipwright")) {
                        statBoost[0] += 3;
                        statBoost[1] += 5;
                        statBoost[2] += 3;
                    } else {
                        if (wright.equals("Luxorious shipwright")) {
                            statBoost[0] += 5;
                            statBoost[1] += 3;
                            statBoost[2] += 3;
                        } else {
                            if (wright.equals("Sleek shipwright")) {
                                statBoost[0] += 5;
                                statBoost[1] += 3;
                                statBoost[2] += 3;
                            } else {
                                if (wright.equals("Ostentatious shipwright")) {
                                    statBoost[0] += 8;
                                    statBoost[1] += 5;
                                    statBoost[2] += 5;
                                } else {
                                    if (wright.equals("Battleship shipwright")) {
                                        statBoost[0] += 5;
                                        statBoost[1] += 8;
                                        statBoost[2] += 5;
                                    } else {
                                        if (wright.equals("Maritime shipwright")) {
                                            statBoost[0] += 5;
                                            statBoost[1] += 5;
                                            statBoost[2] += 8;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        //Final modifier application
        if (foundSolid) {
            ArrayList<String> unique = new ArrayList<>();
            for (int t = 0; t < 6; t++) {
                Crew cr = c.getCrew().get(t);
                if (!unique.contains(cr.getName())) {
                    if (t != memberActiveSolid && t != 0) {
                        unique.add(cr.getName());
                    }
                }
            }
            setStats[0] += solidBoost * unique.size();
            setStats[1] += solidBoost * unique.size();
            setStats[2] += solidBoost * unique.size();
        }
        if (statBoost[0] != 0 || statBoost[1] != 0 || statBoost[2] != 0) {
            setStats[0] = max(setStats[0] * 100 + (setStats[0] * statBoost[0]) / 100, 0);
            setStats[1] = max(setStats[1] * 100 + (setStats[1] * statBoost[1]) / 100, 0);
            setStats[2] = max(setStats[2] * 100 + (setStats[2] * statBoost[2]) / 100, 0);
        }

        //Calculating success rate and save if best
        double succesM, succesC, succesS;
        if (need[0] > 0) {
            succesM = min(setStats[0] * 100 / need[0], 100.0);
        } else {
            succesM = 100.0;
        }
        if (need[1] > 0) {
            succesC = min(setStats[1] * 100 / need[1], 100.0);
        } else {
            succesC = 100.0;
        }
        if (need[2] > 0) {
            succesS = min(setStats[2] * 100 / need[2], 100.0);
        } else {
            succesS = 100.0;
        }

        double succesNew = min(succesM, succesC);
        succesNew = min(succesNew, succesS);

        if (succesNew > bestSucces) {
            bestSucces = succesNew;
            bestShipId = shipId;
            bestSet.setContents(c);
        }

        c.emptyContents();
    }

    private int[] shipId2Stats(int[] id) {
        int[] stats = {0, 0, 0};
        for (int t = 0; t < 2; t++) {
            switch (id[t]) {
                case 0:
                    stats[2] += 100;
                    break;
                case 1:
                    stats[0] += 100;
                    break;
                case 2:
                    stats[2] += 200;
                    break;
                case 3:
                    stats[0] += 200;
                    break;
                case 4:
                    stats[1] += 200;
                    break;
                case 5:
                    stats[2] += 450;
                    break;
                case 6:
                    stats[0] += 450;
                    break;
                case 7:
                    stats[1] += 450;
                    break;
                case 8:
                    stats[2] += 700;
                    break;
                case 9:
                    stats[0] += 700;
                    break;
                case 10:
                    stats[1] += 700;
                    break;
                case 11:
                    stats[2] += 1000;
                    break;
                case 12:
                    stats[0] += 1000;
                    break;
                case 13:
                    stats[1] += 1000;
                    break;
                case 14:
                    stats[2] += 1200;
                    break;
                case 15:
                    stats[0] += 1200;
                    break;
                case 16:
                    stats[1] += 1200;
                    break;
                case 17:
                    stats[2] += 1350;
                    break;
                case 18:
                    stats[0] += 1350;
                    break;
                case 19:
                    stats[1] += 1350;
                    break;
                case 20:
                    stats[1] += 1750;
                    break;
                case 21:
                    stats[2] += 2000;
                    break;
                case 22:
                    stats[0] += 2000;
                    break;
            }
        }

        switch (id[2]) {
            case 0:
                stats[0] += 50;
                stats[1] += 50;
                stats[2] += 100;
                break;
            case 1:
                stats[0] += 100;
                stats[1] += 150;
                stats[2] += 100;
                break;
            case 2:
                stats[0] += 100;
                stats[1] += 100;
                stats[2] += 150;
                break;
            case 3:
                stats[0] += 200;
                stats[1] += 450;
                stats[2] += 200;
                break;
            case 4:
                stats[0] += 450;
                stats[1] += 200;
                stats[2] += 200;
                break;
            case 5:
                stats[0] += 300;
                stats[1] += 300;
                stats[2] += 700;
                break;
            case 6:
                stats[0] += 300;
                stats[1] += 700;
                stats[2] += 300;
                break;
            case 7:
                stats[0] += 400;
                stats[1] += 400;
                stats[2] += 900;
                break;
            case 8:
                stats[0] += 400;
                stats[1] += 900;
                stats[2] += 400;
                break;
            case 9:
                stats[0] += 1200;
                stats[1] += 500;
                stats[2] += 500;
                break;
            case 10:
                stats[0] += 500;
                stats[1] += 500;
                stats[2] += 1200;
                break;
            case 11:
                stats[0] += 500;
                stats[1] += 1400;
                stats[2] += 500;
                break;
            case 12:
                stats[0] += 1400;
                stats[1] += 500;
                stats[2] += 500;
                break;
            case 13:
                stats[0] += 850;
                stats[1] += 750;
                stats[2] += 1700;
                break;
            case 14:
                stats[0] += 1325;
                stats[1] += 1325;
                stats[2] += 1325;
                break;
        }

        switch (id[3]) {
            case 0:
                stats[1] += 50;
                break;
            case 1:
                stats[0] += 100;
                break;
            case 2:
                stats[1] += 100;
                break;
            case 3:
                stats[0] += 200;
                break;
            case 4:
                stats[1] += 200;
                break;
            case 5:
                stats[0] += 350;
                break;
            case 6:
                stats[1] += 350;
                break;
            case 7:
                stats[0] += 500;
                break;
            case 8:
                stats[1] += 500;
                break;
            case 9:
                stats[0] += 600;
                break;
            case 10:
                stats[1] += 600;
                break;
            case 11:
                stats[0] += 800;
                break;
            case 12:
                stats[1] += 800;
                break;
            case 13:
                stats[0] += 950;
                stats[2] += 100;
                break;
            case 14:
                stats[1] += 1100;
                break;
        }
        return stats;
    }

    private void showResultSearch() {
        if (ship.getShip().getEnabled()) {
            String[] n = shipId2String(bestShipId);
            int[] m = shipId2Stats(bestShipId);
            this.shipConsole.setText("Deck item 1: " + n[0] + "\nDeck item 2: " + n[1] + "\nHull item: " + n[2] + "\nRam item: " + n[3] + "\n\nShip stat total: " + m[0] + " / " + m[1] + " / " + m[2]);
        } else {
            this.shipConsole.setText("Optimal ship settings are disabled.\nYour ship should have: " + ship.getShip().getDfltStats()[0] + " morale,\n" + ship.getShip().getDfltStats()[1] + " combat and " + ship.getShip().getDfltStats()[2] + " seafaring.");
        }

        if (bestSet.getCrew().size() > 4) {
            Crew cre = bestSet.getCrew().get(0);
            String s = "Captain: " + cre.getName() + " - " + cre.getStats()[0] + " / " + cre.getStats()[1] + " / " + cre.getStats()[2] + "\n";
            for (int t = 1; t < 6; t++) {
                cre = bestSet.getCrew().get(t);
                s += "Crew " + t + ": " + cre.getName() + " - " + cre.getStats()[0] + " / " + cre.getStats()[1] + " / " + cre.getStats()[2] + "\n";
            }
            s += "\nSucces rate: " + bestSucces;
            this.crewConsole.setText(s);
        } else {
            this.crewConsole.setText("Not enough crew members in roster!\n(less than 6 available)");
        }
    }

    private String[] shipId2String(int[] id) {
        String[] names = {"Nothing Found", "Nothing Found", "Nothing Found", "Nothing Found"};
        for (int t = 0; t < 2; t++) {
            switch (id[t]) {
                case 0:
                    names[t] = "Weathered Rigging";
                    break;
                case 1:
                    names[t] = "Small Crate of Food";
                    break;
                case 2:
                    names[t] = "Sturdy Rigging";
                    break;
                case 3:
                    names[t] = "Large Crate of Food";
                    break;
                case 4:
                    names[t] = "Single Cannon";
                    break;
                case 5:
                    names[t] = "Entvined Rigging";
                    break;
                case 6:
                    names[t] = "Small Crate of Riches";
                    break;
                case 7:
                    names[t] = "Cannon x2";
                    break;
                case 8:
                    names[t] = "Oxskin Rigging";
                    break;
                case 9:
                    names[t] = "Large Crate of Riches";
                    break;
                case 10:
                    names[t] = "Heavy Cannon x2";
                    break;
                case 11:
                    names[t] = "Ornate Rigging";
                    break;
                case 12:
                    names[t] = "Eastern Artefacts";
                    break;
                case 13:
                    names[t] = "Cannon x3";
                    break;
                case 14:
                    names[t] = "Whalesking Rigging";
                    break;
                case 15:
                    names[t] = "Eastern Treasures";
                    break;
                case 16:
                    names[t] = "Cannon x4";
                    break;
                case 17:
                    names[t] = "Dragonskin Rigging";
                    break;
                case 18:
                    names[t] = "Eastern Relics";
                    break;
                case 19:
                    names[t] = "Heavy Cannon x4";
                    break;
                case 20:
                    names[t] = "Overwhelmingly Large Cannon x4";
                    break;
                case 21:
                    names[t] = "Bladewing Rigging";
                    break;
                case 22:
                    names[t] = "Fineglow Lanterns";
                    break;
            }
        }

        switch (id[2]) {
            case 0:
                names[2] = "Barnacled Hull";
                break;
            case 1:
                names[2] = "Reinforced Hull";
                break;
            case 2:
                names[2] = "Sleek Hull";
                break;
            case 3:
                names[2] = "Battle Hull";
                break;
            case 4:
                names[2] = "Golden Hull";
                break;
            case 5:
                names[2] = "Hull of Tides";
                break;
            case 6:
                names[2] = "Armoured Hull";
                break;
            case 7:
                names[2] = "Hull of Storms";
                break;
            case 8:
                names[2] = "War Hull";
                break;
            case 9:
                names[2] = "Hull of Glory";
                break;
            case 10:
                names[2] = "Storm Rider Hull";
                break;
            case 11:
                names[2] = "Golden Katana Hull";
                break;
            case 12:
                names[2] = "Blazing Lantern Hull";
                break;
            case 13:
                names[2] = "Blackwater Hull";
                break;
            case 14:
                names[2] = "Shimmering Azure Hull";
                break;
        }

        switch (id[3]) {
            case 0:
                names[2] = "Weathered Ram";
                break;
            case 1:
                names[2] = "Polished Figurehead";
                break;
            case 2:
                names[2] = "Sturdy Ram";
                break;
            case 3:
                names[2] = "Enchanted Figurehead";
                break;
            case 4:
                names[2] = "Reinforced Ram";
                break;
            case 5:
                names[2] = "Skeletal Figurehead";
                break;
            case 6:
                names[2] = "Armoured Ram";
                break;
            case 7:
                names[2] = "Ghostly Figurehead";
                break;
            case 8:
                names[2] = "Battle Ram";
                break;
            case 9:
                names[2] = "Intrepid Figurehead";
                break;
            case 10:
                names[2] = "War Ram";
                break;
            case 11:
                names[2] = "Inspiring Figurehead";
                break;
            case 12:
                names[2] = "Spitfire Cannon";
                break;
            case 13:
                names[2] = "Figurehead of the Spires";
                break;
            case 14:
                names[2] = "Ram of the Bladewing";
                break;
        }

        return names;
    }

    public void setSrchBt(String s) {
        this.btSrch.setText(s);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox AOT;
    private javax.swing.JLabel Version;
    private javax.swing.JButton btSrch;
    private javax.swing.JTextArea crewConsole;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel mNeed;
    private javax.swing.JTextArea shipConsole;
    // End of variables declaration//GEN-END:variables
}
